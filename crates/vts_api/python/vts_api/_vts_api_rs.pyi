from __future__ import annotations

from enum import Enum
from typing import Mapping


class PyPortKind(Enum):
    INPUT = ...
    OUTPUT = ...


class PyPortClass(Enum):
    CLOCK = ...
    LUT_IN = ...
    LUT_OUT = ...
    LATCH_IN = ...
    LATCH_OUT = ...


class PyPort:
    def __init__(
        self,
        name: str,
        kind: PyPortKind,
        n_pins: int | None = None,
        class_: PyPortClass | None = None,
    ) -> None: ...

    @property
    def name(self) -> str: ...

    @name.setter
    def name(self, value: str) -> None: ...

    @property
    def kind(self) -> PyPortKind: ...

    @kind.setter
    def kind(self, value: PyPortKind) -> None: ...

    @property
    def n_pins(self) -> int: ...

    @n_pins.setter
    def n_pins(self, value: int) -> None: ...

    @property
    def class_(self) -> PyPortClass: ...

    @class_.setter
    def class_(self, value: PyPortClass): ...

    def copy(self) -> PyPort: ...


class PyComponentClass(Enum):
    LUT = ...
    LATCH = ...


class PyComponent:
    def __init__(self, name: str, class_: PyComponentClass | None = None) -> None: ...

    @property
    def name(self) -> str: ...

    @name.setter
    def name(self, value: str) -> None: ...

    @property
    def ports(self) -> dict[str, PyPort]: ...

    @ports.setter
    def ports(self, value: dict[str, PyPort]) -> None: ...

    @property
    def children(self) -> dict[str, PyComponent]: ...

    @children.setter
    def children(self, value: dict[str, PyComponent]) -> None: ...

    @property
    def class_(self) -> PyComponentClass | None: ...

    @class_.setter
    def class_(self, value: PyComponentClass) -> None: ...

    def add_port(self, name: str, port: PyPort) -> None: ...

    def add_ports(self, ports: Mapping) -> None: ...
