from __future__ import annotations

from enum import Enum
from typing import Mapping

class PyModule:
    def __init__(self, name: str) -> None: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @property
    def components(self) -> dict[str, PyComponent]: ...
    @components.setter
    def components(self, value: dict[str, PyComponent]) -> None: ...
    def add_component(
        self,
        name: str,
        component: PyComponent,
    ) -> PyComponent: ...
    def add_components(self, components: Mapping[str, PyComponent]) -> None: ...

class PyComponentClass(Enum):
    LUT = ...
    LATCH = ...

class PyComponent:
    def __init__(self, name: str, class_: PyComponentClass | None = None) -> None: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @property
    def ports(self) -> dict[str, PyPort]: ...
    @ports.setter
    def ports(self, value: dict[str, PyPort]) -> None: ...
    @property
    def children(self) -> dict[str, PyComponent]: ...
    @children.setter
    def children(self, value: dict[str, PyComponent]) -> None: ...
    @property
    def class_(self) -> PyComponentClass | None: ...
    @class_.setter
    def class_(self, value: PyComponentClass) -> None: ...
    def copy(self) -> PyComponent: ...
    def add_port(self, name: str, port: PyPort) -> PyPort: ...
    def add_ports(self, ports: Mapping[str, PyPort]) -> None: ...

class PyPortKind(Enum):
    INPUT = ...
    OUTPUT = ...

class PyPortClass(Enum):
    CLOCK = ...
    LUT_IN = ...
    LUT_OUT = ...
    LATCH_IN = ...
    LATCH_OUT = ...

class PyPort:
    def __init__(
        self,
        name: str,
        kind: PyPortKind,
        n_pins: int | None = None,
        class_: PyPortClass | None = None,
    ) -> None: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @property
    def kind(self) -> PyPortKind: ...
    @kind.setter
    def kind(self, value: PyPortKind) -> None: ...
    @property
    def n_pins(self) -> int: ...
    @n_pins.setter
    def n_pins(self, value: int) -> None: ...
    @property
    def class_(self) -> PyPortClass: ...
    @class_.setter
    def class_(self, value: PyPortClass): ...
    def copy(self) -> PyPort: ...

def json_loads(input: str) -> PyModule: ...
def json_dumps(module: PyModule) -> str: ...
