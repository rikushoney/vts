from __future__ import annotations

from enum import Enum
from typing import Iterable, Literal, Mapping


def _component_class_from_str(class_: str) -> PyComponentClass: ...


_ComponentClassStr = Literal["lut", "LUT", "latch", "LATCH", "ff", "FF"]


class PyModule_:
    def __init__(self, name: str) -> None: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @property
    def components(self) -> dict[str, PyComponent]: ...
    @components.setter
    def components(self, value: dict[str, PyComponent]) -> None: ...
    def add_component(
        self,
        name: str | PyComponent | None = None,
        component: PyComponent | None = None,
        class_: PyComponentClass | _ComponentClassStr | None = None,
    ) -> PyComponent: ...
    def add_components(
        self, components: Mapping[str, PyComponent] | Iterable[PyComponent]
    ) -> None: ...


class PyComponentClass(Enum):
    LUT = ...
    LATCH = ...


def _port_kind_from_str(kind: str) -> PyPortKind: ...


_PortKindStr = Literal[
    "input", "in", "i", "INPUT", "IN", "I", "output", "out", "o", "OUTPUT", "OUT", "O"
]


def _port_class_from_str(class_: str) -> PyPortClass: ...


_PortClassStr = Literal[
    "lut_in",
    "LUT_IN",
    "lut_out",
    "LUT_OUT",
    "latch_in",
    "LATCH_IN",
    "latch_out",
    "LATCH_OUT",
]


class PyComponent:
    def __init__(
        self, name: str, class_: PyComponentClass | _ComponentClassStr | None = None
    ) -> None: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @property
    def ports(self) -> dict[str, PyPort]: ...
    @ports.setter
    def ports(self, value: dict[str, PyPort]) -> None: ...
    @property
    def children(self) -> dict[str, PyComponent]: ...
    @children.setter
    def children(self, value: dict[str, PyComponent]) -> None: ...
    @property
    def class_(self) -> PyComponentClass | None: ...
    @class_.setter
    def class_(self, value: PyComponentClass) -> None: ...
    def copy(self) -> PyComponent: ...
    def add_port(
        self,
        name: str | PyPort | None = None,
        *,
        port: PyPort | None = None,
        kind: PyPortKind | _PortKindStr | None = None,
        n_pins: int | None = None,
        class_: PyPortClass | _PortClassStr | None = None,
    ) -> PyPort: ...
    def add_ports(self, ports: Mapping[str, PyPort] | Iterable[PyPort]) -> None: ...


class PyPortKind(Enum):
    INPUT = ...
    OUTPUT = ...


class PyPortClass(Enum):
    CLOCK = ...
    LUT_IN = ...
    LUT_OUT = ...
    LATCH_IN = ...
    LATCH_OUT = ...


class PyPort:
    def __init__(
        self,
        name: str,
        kind: PyPortKind | _PortKindStr,
        n_pins: int | None = None,
        class_: PyPortClass | _PortClassStr | None = None,
    ) -> None: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @property
    def kind(self) -> PyPortKind: ...
    @kind.setter
    def kind(self, value: PyPortKind) -> None: ...
    @property
    def n_pins(self) -> int: ...
    @n_pins.setter
    def n_pins(self, value: int) -> None: ...
    @property
    def class_(self) -> PyPortClass: ...
    @class_.setter
    def class_(self, value: PyPortClass): ...
    def copy(self) -> PyPort: ...
